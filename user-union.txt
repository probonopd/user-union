#!/bin/bash

# user-union [options] [[--] command]
# This performs a user-space union mount, implemented using LD_PRELOAD.

# YOU MAY EDIT THIS FILE

# When accessing a particular directory, the longest-matching directory name
# is used; if it matches more than one, the first one is used.
#
# If no command is given, the $SHELL is executed.


# These are configured by "make" during building.
my_library_la_name=XYZ
libdir=XYZ

OVERLAY_DIRECTORY=""
UNDERLAY_DIRECTORY=""
MOUNT_POINT=""
DEFAULT_OVERLAY_DIRECTORY="/tmp/redir"
DEFAULT_UNDERLAY_DIRECTORY="/"
DEFAULT_MOUNT_POINT="/"
DEFAULT_NONUNION="/tmp /var/tmp /home /Users"
TESTMODE=n
NOOP=n
# FIXME: Put this value in one place in the source code
OVERRIDE_PREFIX_VALUE="/./.././."
MY_USER_UNION_PRIV_DIR="/tmp/redir/.user-union"
MATCH_DEPTH=-1

if [ -n "$LD_PRELOAD" ]; then
 MY_LD_PRELOAD="${LD_PRELOAD}"
 # need to unset LD_PRELOAD so that it doesn't affect our sub-processes like expr
 unset LD_PRELOAD
fi

if ! mkdir -p "$MY_USER_UNION_PRIV_DIR/opendir/" \
  "$MY_USER_UNION_PRIV_DIR/whitelist/"
then
  echo "FAILURE: Cannot create directories in $1." >&2
  exit 1
fi

if [ -n "$USER_UNION_CNT" ]; then
  MY_USER_UNION_CNT_INIT=`expr "$USER_UNION_CNT" + 1`
else
  MY_USER_UNION_CNT_INIT=0
fi
MY_USER_UNION_CNT="$MY_USER_UNION_CNT_INIT"

add_branch() {
  # $1 is the overlay, $2 is the underlay, $3 is the mount point
  if [ -n "$1" ]; then
    export USER_UNION_${MY_USER_UNION_CNT}_OVERLAY="$(realpath $1)"
  fi
  if [ -n "$2" ]; then
    export USER_UNION_${MY_USER_UNION_CNT}_UNDERLAY_0="$(realpath $2)"
    export USER_UNION_${MY_USER_UNION_CNT}_UNDERLAY_CNT=1
    DEFAULT_MOUNT_POINT="$(realpath $2)"
  fi
  if [ -n "$3" ]; then
    export USER_UNION_${MY_USER_UNION_CNT}_MOUNT_POINT="$(realpath -m $3)"
  else
    export USER_UNION_${MY_USER_UNION_CNT}_MOUNT_POINT="$DEFAULT_MOUNT_POINT"
  fi
  if [ $MATCH_DEPTH != -1 ]; then
    export USER_UNION_${MY_USER_UNION_CNT}_MATCH_DEPTH=$MATCH_DEPTH
  fi
  MY_USER_UNION_CNT=`expr "$MY_USER_UNION_CNT" + 1`
}

add_pair() {
  # $1 is the overlay, $2 is the underlay
  add_branch "$1" "$2" "$MOUNT_POINT"
}

usage() {
cat << USAGE
user-union [OPTIONS] [COMMAND]

Where options are:
  -a OV UN  Add  an  overlay,  where  overlay  OV  overlays  underlay UN.
            Attempted writes to "underlay" will instead write  to  "over-
            lay",  and  any  contents of "overlay" will override those in
            "underlay".

  -d        Turn on user-union debugging output.

  -i DIR    Ignore DIR - do not overlay it, even if it’s within a  direc-
            tory that is overlaid.

  -l OV UN MP
            Add an overlay OV which overlays the underlay UN and is
            accessable through the mountpoint MP.

  -m UN     Simulated mount.  Create a temporary overlay directory TEMPO-
            RARY, print that directory name TEMPORARY as the first output
            line,  and  then do -a TEMPORARY UN.  If you want to create a
            "writable" directory  region  and  don’t  care  what  overlay
            directory is used, use this.

  -n        No-operation (dry run).  Print the resulting USER_UNION using
            "od -c" and exit.  This is intended for testing purposes.

  -o OV     Set the default overlay directory to OV which  is  used  when
            there  are no other commands determining what to overlay; see
            the description.

  -r OV MP  No-underlay mount. Make path OV accessible through
            the mount point MP.

  -t        Test mode. Use current directory’s  "user-union.so"  library,
            instead of searching the usual library directories.

  -u UN     Set  the  default underlay directory to UN which is used when
            there are no other commands determining what to overlay;  see
            the description.

  -x NUM    Set matching depth for subsequently added overlays.
            For example, if you have overlay /tmp/root on /root and set
            matching depth to 1, then only /root will be redirected to
            /tmp/root, but all the /root/** sub-directories will keep using
            previously defined overlay (or no overlay at all).
            Set depth to -1 for unlimited depth (unlimited is the default).

  -P        Report the override prefix on a line and return.
            The override prefix disables user-union redirection of a pathname.
            Prepend the override prefix to an absolute pathname to
            refer to the actual pathname without redirection.
            (User-union internally uses the override prefix to prevent the
            "looping" problems of past systems. This mechanism is also
            sometimes useful if you need to directly control pathnames.)
USAGE
exit 0
}

# Process options.
# This is written so it can be stacked (user-union in user-union), but
# there's a limit to how well this can be stacked.

while [ $# -gt 0 ] ; do
  case "$1" in
    -a) shift
        add_pair "$1" "$2"
        shift ; shift ;;
    -d) shift ; export USER_UNION_DEBUG=1 ;;
    -i) shift
        add_branch "$1"
        shift ;;
    -k) shift ; MOUNT_POINT="$1" ; shift ;;
    -l) shift
        add_branch "$1" "$2" "$3"
        shift ; shift ; shift ;;
    -m) shift
        anon_overlay="$(mktemp -d)"
        add_pair "$anon_overlay" "$1"
        printf "%s\n" "$anon_overlay"
        shift ;;
    -n) shift ; NOOP=y ;;
    -o) shift ; OVERLAY_DIRECTORY="$1" ; shift ;;
    -p) shift
        if [ -z "$MY_LD_PRELOAD" ]; then
          MY_LD_PRELOAD="$1"
        else
          MY_LD_PRELOAD="$MY_LD_PRELOAD $1"
        fi
        shift ;;
    -r) shift
        add_branch "$1" "" "$2"
        shift ; shift ;;
    -t) shift ; TESTMODE="y" ;;
    -u) shift ; UNDERLAY_DIRECTORY="$1" ; shift ;;
    -x) shift ; MATCH_DEPTH=$1 ; shift ;;
    -P) shift
        printf '%s\n' "$OVERRIDE_PREFIX_VALUE"
        exit 0 ;;
    -h) shift ; usage ;;
    --help) shift ; usage ;;
    -\?) shift ; usage ;;
    --) shift ; break ;;
    -*) echo "Unknown option $1. Try --help" >&2 ; shift ; exit 1 ;;
    *)  break ;;
  esac
done

if [ $MY_USER_UNION_CNT -eq $MY_USER_UNION_CNT_INIT ] ; then
 # Nothing set, create reasonable defaults.
add_pair "${OVERLAY_DIRECTORY:-"$DEFAULT_OVERLAY_DIRECTORY"}" \
          "${UNDERLAY_DIRECTORY:-"$DEFAULT_UNDERLAY_DIRECTORY"}"
 for i in ${DEFAULT_NONUNION}; do
   add_branch "$i"
 done
fi

# Find where library "la" file is
if [ "$TESTMODE" = "n" ] ; then
  full_la_filename="${libdir}/${my_library_la_name}"
else
  full_la_filename="$(pwd)/${my_library_la_name}"
fi
if ! [ -f "$full_la_filename" ] ; then
  echo "FAILURE: Could not find $full_la_filename" >&2
  exit 1
fi

# Find shared object name (.so, .dll, or whatever) from "la" file
MY_USER_UNION_SO="$(grep '^dlname=' "$full_la_filename")"
MY_USER_UNION_SO="${MY_USER_UNION_SO#*=}"
MY_USER_UNION_SO="${MY_USER_UNION_SO#\'}"
MY_USER_UNION_SO="${MY_USER_UNION_SO%\'}"

if [ "$TESTMODE" = "n" ] ; then
  MY_USER_UNION_SO="${libdir}/${MY_USER_UNION_SO}"
else
  MY_USER_UNION_SO="$(pwd)/.libs/${MY_USER_UNION_SO}"
fi

# Sanity check of USER_UNION_SO
# case "$USER_UNION_SO" in
#  (*/*)  # Contains a slash
#    case "$USER_UNION_SO" in
#      (/*)  ;;
#      (*)
#          echo "FAIL.  Library name has slash but doesn't begin with one." >&2
#          echo "USER_UNION_SO set to $USER_UNION_SO" >&2
#          exit 1
#          ;;
#    esac
#  ;;
# esac

# Figure out what LD_PRELOAD should become.  Don't add to LD_PRELOAD
# if it's already there, so that user-union can be (mostly) nestable.
if [ -n "$MY_LD_PRELOAD" ] ; then
 MY_LD_PRELOAD="$MY_LD_PRELOAD $MY_USER_UNION_SO"
else
 MY_LD_PRELOAD="$MY_USER_UNION_SO"
fi

# We don't want to risk calling anything unexpected after we set
# LD_PRELOAD or USER_UNION.  Although "test" ("[") is often implemented
# by the shell, it *might* be implemented by calling a separate program.
# So we'll set an intermediate variable now,
# and we can later use case...esac to check it.
if [ $# -lt 1 ] ; then
  USE_DEFAULT_COMMAND=y
else
  USE_DEFAULT_COMMAND=n
fi

[ -z "$USER_UNION_PRIV_DIR" ] && export USER_UNION_PRIV_DIR="$MY_USER_UNION_PRIV_DIR"
export USER_UNION_CNT="$MY_USER_UNION_CNT"

if [ $NOOP = "y" ] ; then
 set | grep "^USER_UNION"
 exit 0
fi

# echo "DEBUG: LD_PRELOAD will become: ${MY_LD_PRELOAD}"

# Run the command, with LD_PRELOAD and USER_UNION set to do the union.
# We only set LD_PRELOAD and USER_UNION as the very last operations
# before executing the command to be run.
export LD_PRELOAD="${MY_LD_PRELOAD}"

case "$USE_DEFAULT_COMMAND" in
  y) # No command given, run $SHELL.
    echo "Starting ${SHELL:='/bin/sh'} (exit it to end union mount)."
    exec "$SHELL"
    ;;
  n) # Command given, run it.
    exec "$@"
    ;;
esac

