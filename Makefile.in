# Makefile for:
NAME=user-union
VERSION=0.12

# This makefile generally follows the GNU coding standards
# ("info standards") release process.
# It does use mkdir's "-p"; "-p" is now part of the Single Unix Spec v3,
# so it should be safe to use.

SHELL=/bin/sh
INSTALL=install -p

# Set prefix to "/usr" if you want these installed in system locations.
prefix=/usr/local
# exec_prefix is not used in this package:
exec_prefix=$(prefix)
bindir=$(exec_prefix)/bin
sbindir=$(exec_prefix)/sbin
libdir=$(exec_prefix)/lib
libexecdir=$(exec_prefix)/libexec
datarootdir=$(prefix)/share
datadir=$(datarootdir)
# scriptdir holds the wrapped shell programs (architecture-independent):
scriptdir=$(datadir)/$(NAME)
mandir=$(datarootdir)/man
man1dir=$(mandir)/man1
# Used when creating RPM files:
rpmbuilddir=$(HOME)/rpmbuild

# DESTDIR can be set, if desired.

INSTALL_PROGRAM=$(INSTALL)
INSTALL_DATA=$(INSTALL) -m 644
MKDIR=mkdir
MKDIR_P=$(MKDIR) -p

OBJECT_SUFFIX=so

CFLAGS_EXTRA=-fPIC -Wall
LOADERFLAGS_EXTRA=$(CFLAGS_EXTRA) -shared
LOADERFLAGS_LIBS=-ldl

all: user-union.o user-union.so Makefile

user-union.so: user-union.o
	$(CC) $(LOADERFLAGS_EXTRA) -o user-union.so user-union.o $(LOADERFLAGS_LIBS)

user-union.o: user-union.c
	$(CC) $(CFLAGS) $(CFLAGS_EXTRA) -c -o user-union.o user-union.c

test: all
	./runtest 2>&1 | less

check: test

accept:
	@echo "Test results accepted"
	./runtest -a

installdirs:
	$(MKDIR_P) "$(DESTDIR)$(bindir)"
	$(MKDIR_P) "$(DESTDIR)$(libdir)"
	$(MKDIR_P) "$(DESTDIR)$(man1dir)"
	# Check to make sure that key dirs exist (and fail if they don't):
	test -d "$(DESTDIR)$(bindir)"

# As required by the GNU coding standards, we install data and programs
# one per line, and repeat the name of the file being installed, to work
# around limitations of various old utilities.

# We provide the target "do-install" for "make" implementations that
# don't correctly handle .PHONY.  The problem is that we (must) have
# a program named "install", so if make doesn't correctly implement
# .PHONY, then make will get confused with the command "make install".
# If you have such a (lousy) make, do "make do-install" instead
# of "make install".  Or, install GNU make!

do-install: installdirs
	# Front-end programs, install in bindir:
	$(INSTALL_PROGRAM) user-union.o  "$(DESTDIR)$(libdir)/user-union.o"
	$(INSTALL_PROGRAM) user-union.so "$(DESTDIR)$(libdir)/user-union.so"
	# Wrapped commands, install in script directory (alphabetical order):
	$(INSTALL_PROGRAM) user-union   "$(DESTDIR)$(bindir)/user-union"
	$(INSTALL_PROGRAM) user-union   "$(DESTDIR)$(bindir)/run-redir-union"
	# # Man pages:
	-$(INSTALL_DATA)   user-union.1 "$(DESTDIR)$(man1dir)/user-union.1"

install: do-install

# install-strip doesn't really do anything different; nothing is compiled:
install-strip: do-install

uninstall:
	# Remove front-end programs:
	rm -f "$(DESTDIR)$(libdir)/user-union.o"
	rm -f "$(DESTDIR)$(libdir)/user-union.so"
	# Remove all wrapped commands:
	rm -fr "$(DESTDIR)$(bindir)/user-union"
	rm -fr "$(DESTDIR)$(bindir)/run-redir-union"
	# Remove manual pages:
	-rm -f "$(DESTDIR)$(man1dir)/user-union.1"

user-union.pdf: user-union.1
	man -t ./user-union.1 | ps2pdf - user-union.pdf

run-redir-union.pdf: run-redir-union.1
	man -t ./run-redir-union.1 | ps2pdf - run-redir-union.pdf

pdf: user-union.pdf run-redir-union.pdf

# This works around the expansion done by "make":
dollar=$

tarball: pdf
	@rm -f MANIFEST
	@find . ! -type d \! -name '*.tgz' \! -name '*.rpm'  \
                \! -name 'Makefile' \! -name 'config.status'           \
                \! -name 'run-redir'  \! -name ',testdir'              \
	        \! -name 'index.html' \! -name 'results'               \
	        \! -name '*.o' \! -name '*.so' \! -name ',*'           \
	      | sed -e '/\/old\//d' -e '/\/.git\//d'                   \
	      | sed -e "s/^\.\//$(NAME)-$(VERSION)\//" > MANIFEST
	@(cd ..; ln -s $(NAME) $(NAME)-$(VERSION))
	(cd ..; tar -czvf $(NAME)/$(NAME)-$(VERSION).tgz `cat $(NAME)/MANIFEST`)
	@(cd ..; rm $(NAME)-$(VERSION))

dist: tarball

rpm: tarball
	test -d "$(rpmbuilddir)/SOURCES"
	cp -p  $(NAME)-$(VERSION).tgz "$(rpmbuilddir)/SOURCES/"
	rpmbuild -ba $(NAME).spec 
	cp -p $(rpmbuilddir)/RPMS/*/$(NAME)-$(VERSION)-*.rpm \
              $(rpmbuilddir)/SRPMS/$(NAME)-$(VERSION)-*.src.rpm ./
	@echo "run 'make rpmlint' to check the result"

rpmlint:
	rpmlint $(NAME).spec $(rpmbuilddir)/RPMS/*/$(NAME)-$(VERSION)-*.rpm \
                $(rpmbuilddir)/SRPMS/$(NAME)-$(VERSION)-*.src.rpm

print:
	enscript -G README

# Makefile is generated from Makefile.in, but removing it
# can cause other trouble, so we won't remove it normally.
clean:
	rm -fr config.status user-union.o user-union.so .overlay_results .expected_results

really_clean: clean
	rm -fr Makefile


distclean: clean

# This is recommended by the GNU conventions:
Makefile: configure Makefile.in
	if [ -x config.status ] ; then ./config.status ; else ./configure ; fi

.PHONY: accept all clean dist distclean do-install install install-strip \
        tarball test pdf rpm rpmlint print uninstall

